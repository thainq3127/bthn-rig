/**
 * SmartShooter API Usage Examples
 * C√°c v√≠ d·ª• s·ª≠ d·ª•ng SmartShooter API trong TypeScript
 */

import { 
  SmartShooterContext, 
  Property, 
  ShutterButton, 
  CameraStatus,
  LiveviewFocusStep 
} from './index';

// V√≠ d·ª• 1: K·∫øt n·ªëi v√† ch·ª•p ·∫£nh c∆° b·∫£n
export async function basicPhotographyExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    console.log('üîå ƒêang k·∫øt n·ªëi t·ªõi SmartShooter...');
    await smartShooter.connect();
    
    console.log('üì∑ Ch·ªçn t·∫•t c·∫£ camera...');
    smartShooter.selectAllCameras();
    
    console.log('üîó K·∫øt n·ªëi camera...');
    await smartShooter.connect_cameras();
    
    // ƒê·ª£i camera s·∫µn s√†ng
    await waitForCameraReady(smartShooter);
    
    console.log('üì∏ Ch·ª•p ·∫£nh...');
    await smartShooter.shoot();
    
    console.log('‚úÖ Ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// V√≠ d·ª• 2: C√†i ƒë·∫∑t camera chi ti·∫øt
export async function advancedCameraSettingsExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    await smartShooter.connect();
    smartShooter.selectAllCameras();
    await smartShooter.connect_cameras();
    
    console.log('‚öôÔ∏è ƒêang c√†i ƒë·∫∑t camera...');
    
    // C√†i ƒë·∫∑t exposure
    await smartShooter.setProperty(Property.ISO, "400");
    await smartShooter.setProperty(Property.Aperture, "f/8");
    await smartShooter.setProperty(Property.ShutterSpeed, "1/125");
    
    // C√†i ƒë·∫∑t white balance
    await smartShooter.setProperty(Property.WhiteBalance, "Daylight");
    
    // C√†i ƒë·∫∑t ch·∫•t l∆∞·ª£ng ·∫£nh
    await smartShooter.setProperty(Property.DriveMode, "Single");
    
    // Ki·ªÉm tra c√†i ƒë·∫∑t hi·ªán t·∫°i
    const currentSettings = {
      iso: smartShooter.getProperty(Property.ISO),
      aperture: smartShooter.getProperty(Property.Aperture),
      shutter: smartShooter.getProperty(Property.ShutterSpeed),
      wb: smartShooter.getProperty(Property.WhiteBalance)
    };
    
    console.log('üìã C√†i ƒë·∫∑t hi·ªán t·∫°i:', currentSettings);
    
    // Ch·ª•p v·ªõi c√†i ƒë·∫∑t m·ªõi
    await smartShooter.shoot();
    
  } catch (error) {
    console.error('‚ùå L·ªói c√†i ƒë·∫∑t camera:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// V√≠ d·ª• 3: Liveview v√† Focus
export async function liveviewFocusExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    await smartShooter.connect();
    smartShooter.selectAllCameras();
    await smartShooter.connect_cameras();
    
    console.log('üìπ B·∫≠t liveview...');
    await smartShooter.enableLiveview(true);
    
    // ƒê·ª£i liveview kh·ªüi ƒë·ªông
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üîç Th·ª±c hi·ªán autofocus...');
    await smartShooter.autofocus();
    
    // Manual focus adjustments
    console.log('üîß Tinh ch·ªânh focus...');
    await smartShooter.moveFocus(LiveviewFocusStep.Near1);
    await new Promise(resolve => setTimeout(resolve, 500));
    await smartShooter.moveFocus(LiveviewFocusStep.Far2);
    
    console.log('üì∏ Ch·ª•p ·∫£nh v·ªõi liveview...');
    await smartShooter.shoot();
    
    console.log('üìπ T·∫Øt liveview...');
    await smartShooter.enableLiveview(false);
    
  } catch (error) {
    console.error('‚ùå L·ªói liveview:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// V√≠ d·ª• 4: Qu·∫£n l√Ω nhi·ªÅu camera
export async function multiCameraExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    await smartShooter.connect();
    
    // L·∫•y danh s√°ch camera
    const cameras = smartShooter.getCameraList();
    console.log('üì∑ T√¨m th·∫•y camera:', cameras.length);
    
    if (cameras.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y camera n√†o');
    }
    
    // In th√¥ng tin t·ª´ng camera
    cameras.forEach((cameraKey, index) => {
      const info = smartShooter.getCameraInfo(cameraKey);
      if (info) {
        console.log(`üì∑ Camera ${index + 1}:`);
        console.log(`   - T√™n: ${info.CameraName}`);
        console.log(`   - Tr·∫°ng th√°i: ${info.CameraStatus}`);
        console.log(`   - Pin: ${info.CameraBatterylevel}%`);
        console.log(`   - Group: ${info.CameraGroup}`);
      }
    });
    
    // Ch·ªçn v√† k·∫øt n·ªëi t·ª´ng camera ri√™ng bi·ªát
    for (const cameraKey of cameras) {
      console.log(`üîó K·∫øt n·ªëi camera: ${cameraKey}`);
      smartShooter.selectCamera(cameraKey);
      await smartShooter.connect_cameras();
      
      // Ki·ªÉm tra tr·∫°ng th√°i
      const info = smartShooter.getCameraInfo(cameraKey);
      if (info?.CameraStatus === CameraStatus.Ready) {
        console.log(`‚úÖ Camera ${cameraKey} s·∫µn s√†ng`);
      }
    }
    
    // Ch·ª•p t·∫•t c·∫£ c√πng l√∫c
    smartShooter.selectAllCameras();
    await smartShooter.shoot();
    
  } catch (error) {
    console.error('‚ùå L·ªói multi-camera:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// V√≠ d·ª• 5: Trigger v√† Timing
export async function triggerTimingExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    await smartShooter.connect();
    smartShooter.selectAllCameras();
    await smartShooter.connect_cameras();
    
    console.log('‚è±Ô∏è Trigger timing example...');
    
    // Pre-trigger preparation
    await smartShooter.setShutterButton(ShutterButton.Half);
    await new Promise(resolve => setTimeout(resolve, 1000)); // Focus time
    
    // Engage trigger
    console.log('üî´ Engage trigger...');
    await smartShooter.engageTrigger();
    
    // Hold for action
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Release with precise timing
    console.log('üì∏ Release trigger...');
    await smartShooter.releaseTrigger(50); // 50ms delay
    
    // Clean up
    await smartShooter.setShutterButton(ShutterButton.Off);
    
  } catch (error) {
    console.error('‚ùå L·ªói trigger timing:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// V√≠ d·ª• 6: Qu·∫£n l√Ω v√† Download ·∫£nh
export async function photoManagementExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    await smartShooter.connect();
    smartShooter.selectAllCameras();
    await smartShooter.connect_cameras();
    
    // Ch·ª•p m·ªôt v√†i ·∫£nh
    console.log('üì∏ Ch·ª•p ·∫£nh test...');
    await smartShooter.shoot();
    await new Promise(resolve => setTimeout(resolve, 2000));
    await smartShooter.shoot();
    
    // Sync ƒë·ªÉ l·∫•y danh s√°ch ·∫£nh m·ªõi
    console.log('üîÑ ƒê·ªìng b·ªô danh s√°ch ·∫£nh...');
    await smartShooter.synchronise();
    
    // L·∫•y danh s√°ch ·∫£nh
    const photos = smartShooter.getPhotoList();
    console.log(`üìã T√¨m th·∫•y ${photos.length} ·∫£nh`);
    
    if (photos.length > 0) {
      // In th√¥ng tin ·∫£nh
      photos.forEach((photoKey, index) => {
        const info = smartShooter.getPhotoInfo(photoKey);
        if (info) {
          console.log(`üì∑ ·∫¢nh ${index + 1}:`);
          console.log(`   - T√™n: ${info.PhotoFilename}`);
          console.log(`   - K√≠ch th∆∞·ªõc: ${info.PhotoFilesize} bytes`);
          console.log(`   - ƒê·ªãnh d·∫°ng: ${info.PhotoFormat}`);
        }
      });
      
      // Ch·ªçn v√† download t·∫•t c·∫£ ·∫£nh
      console.log('‚¨áÔ∏è Downloading ·∫£nh...');
      smartShooter.selectAllPhotos();
      await smartShooter.downloadPhotos();
      
      console.log('‚úÖ Download ho√†n th√†nh!');
      
      // T√πy ch·ªçn: X√≥a ·∫£nh tr√™n camera (c·∫©n th·∫≠n!)
      // console.log('üóëÔ∏è X√≥a ·∫£nh tr√™n camera...');
      // await smartShooter.deletePhotos(false); // false = ch·ªâ x√≥a reference, kh√¥ng x√≥a file
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói qu·∫£n l√Ω ·∫£nh:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// V√≠ d·ª• 7: Event Handling (n·∫øu c√≥ WebSocket implementation)
export async function eventHandlingExample() {
  const smartShooter = new SmartShooterContext();
  
  try {
    await smartShooter.connect();
    
    // L·∫Øng nghe events (t√πy thu·ªôc v√†o WebSocket implementation)
    console.log('üëÇ L·∫Øng nghe events...');
    
    // Simulated event handling (for demonstration only)
    // const eventHandler = (event: BaseMessage) => {
    //   console.log('üì¢ Nh·∫≠n event:', event);
    //   // Event handling implementation would depend on WebSocket setup
    // };
    
    // Note: Event handling requires WebSocket implementation
    console.log('‚ÑπÔ∏è Event handling c·∫ßn WebSocket implementation');
    
    // Register event handler (implementation dependent)
    // smartShooter.onEvent(eventHandler);
    
    smartShooter.selectAllCameras();
    await smartShooter.connect_cameras();
    
    // Th·ª±c hi·ªán c√°c thao t√°c v√† quan s√°t events
    await smartShooter.shoot();
    await new Promise(resolve => setTimeout(resolve, 5000));
    
  } catch (error) {
    console.error('‚ùå L·ªói event handling:', error);
  } finally {
    smartShooter.disconnect();
  }
}

// Utility function: ƒê·ª£i camera s·∫µn s√†ng
async function waitForCameraReady(smartShooter: SmartShooterContext, timeoutMs = 10000) {
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeoutMs) {
    const cameras = smartShooter.getSelectedCameras();
    let allReady = true;
    
    for (const cameraKey of cameras) {
      const info = smartShooter.getCameraInfo(cameraKey);
      if (!info || info.CameraStatus !== CameraStatus.Ready) {
        allReady = false;
        break;
      }
    }
    
    if (allReady) {
      console.log('‚úÖ T·∫•t c·∫£ camera ƒë√£ s·∫µn s√†ng');
      return;
    }
    
    console.log('‚è≥ ƒêang ƒë·ª£i camera s·∫µn s√†ng...');
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  throw new Error('Timeout: Camera kh√¥ng s·∫µn s√†ng');
}

// V√≠ d·ª• ch·∫°y t·∫•t c·∫£ demos
export async function runAllExamples() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu demo SmartShooter API...\n');
  
  try {
    console.log('=== V√≠ d·ª• 1: Photography c∆° b·∫£n ===');
    await basicPhotographyExample();
    
    console.log('\n=== V√≠ d·ª• 2: C√†i ƒë·∫∑t camera n√¢ng cao ===');
    await advancedCameraSettingsExample();
    
    console.log('\n=== V√≠ d·ª• 3: Liveview v√† Focus ===');
    await liveviewFocusExample();
    
    console.log('\n=== V√≠ d·ª• 4: Multi-camera ===');
    await multiCameraExample();
    
    console.log('\n=== V√≠ d·ª• 5: Trigger timing ===');
    await triggerTimingExample();
    
    console.log('\n=== V√≠ d·ª• 6: Qu·∫£n l√Ω ·∫£nh ===');
    await photoManagementExample();
    
    console.log('\n‚úÖ T·∫•t c·∫£ demo ho√†n th√†nh!');
    
  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh demo:', error);
  }
}

// Export cho s·ª≠ d·ª•ng b√™n ngo√†i
export {
  waitForCameraReady
};

// Uncomment ƒë·ªÉ ch·∫°y demo
// runAllExamples();
